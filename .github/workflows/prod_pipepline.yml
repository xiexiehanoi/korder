name: PostgreSQL workflow

on:
  push:
    branches:
      - feature/CICD

env:
  ENVIRONMENT: dev
  ECR_URI: ${{ secrets.ECR_DEV_URI }}
  EC2_USER: ubuntu
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    name: 빌드 및 배포
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v2

      - name: JDK 17 설정
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: gradlew 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Gradle로 빌드
        run: ./gradlew build

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Amazon ECR 로그인
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_DEV_URI }}

      - name: Docker 이미지 빌드, 태그 및 푸시
        run: |
          docker build -t ${{ secrets.ECR_DEV_URI }}:latest .
          docker push ${{ secrets.ECR_DEV_URI }}:latest

      - name: 파일 목록 확인
        run: |
          ls -la /home/runner/work/korder/korder

      - name: 파일을 EC2로 복사
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_EC2_END_POINT }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.AWS_EC2_PEM_KEY }}
          source: |
            /home/runner/work/korder/korder/docker-compose-dev.yml
            /home/runner/work/korder/korder/.env.dev
            /home/runner/work/korder/korder/src/main/resources/application-dev.yml
          target: /home/ubuntu/

      - name: EC2에서 Docker Compose 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_END_POINT }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.AWS_EC2_PEM_KEY }}
          script: |
            echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo docker login -u "${{ secrets.AWS_ACCESS_KEY }}" --password-stdin ${{ secrets.ECR_DEV_URI }}
            cd /home/ubuntu
            if [ -f docker-compose-dev.yml ]; then
              # 기존 컨테이너 중지 및 삭제
              sudo docker-compose --env-file .env.dev -f docker-compose-dev.yml down
              # 이미지 삭제
              sudo docker image rm ${{ secrets.ECR_DEV_URI }}:latest
            fi
            # 최신 이미지 풀링
            sudo docker-compose --env-file .env.dev -f docker-compose-dev.yml pull
            # 서비스 시작
            sudo docker-compose --env-file .env.dev -f docker-compose-dev.yml up -d
