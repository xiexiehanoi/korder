name: PostgreSQL Workflow

on:
  push:
    branches:
      - feature/CICD

env:
  ENVIRONMENT: dev
  ECR_URI: ${{ secrets.ECR_DEV_URI }}
  EC2_USER: ubuntu
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_DEV_URI }}

      - name: Build, Tag and Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_DEV_URI }}:latest .
          docker push ${{ secrets.ECR_DEV_URI }}:latest

      - name: EC2에서 Docker Compose 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_END_POINT }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.AWS_EC2_PEM_KEY }}
          script: |
            echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | sudo docker login -u "${{ secrets.AWS_ACCESS_KEY }}" --password-stdin ${{ secrets.ECR_ROOT_URI }}
            
            # Pull the latest image
            sudo docker pull ${{ secrets.ECR_DEV_URI }}:latest
            
            # If a container with the same name exists, stop and remove it
            if [ "$(sudo docker ps -q -f name=korder_container)" ]; then
              sudo docker stop korder_container
              sudo docker rm korder_container
            fi
            
            # Run the container
            sudo docker run -d \
              --name korder_container \
              -p 8080:8080 \
              --env POSTGRESQL_USERNAME=${{ secrets.POSTGRESQL_USERNAME }} \
              --env POSTGRESQL_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }} \
              --env POSTGRESQL_HOST=${{ secrets.POSTGRESQL_END_POINT }} \
              --env POSTGRESQL_PORT=${{ secrets.POSTGRESQL_PORT }} \
              --env POSTGRESQL_DB_NAME=${{ secrets.POSTGRESQL_DBNAME }} \
              --env JWT_SECRET=${{ secrets.JWT_SECRET }} \
              --env JWT_ACCESSTOKEN_EXPIRED=${{ secrets.JWT_ACCESSTOKEN_EXPIRED }} \
              --env JWT_REFRESHTOKEN_EXPIRED=${{ secrets.JWT_REFRESHTOKEN_EXPIRED }} \
              ${{ secrets.ECR_DEV_URI }}:latest