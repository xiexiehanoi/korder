name: PostgreSQL Workflow

on:
  push:
    branches:
      - feature/CICD

env:
  ENVIRONMENT: dev
  ECR_NAME: korder
  ECR_URI: ${{ secrets.ECR_DEV_URI }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

#      - name: Grant execute permission for gradlew
#        run: chmod +x ./gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-region: ${{ secrets.AWS_REGION }}
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        run: |
#          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_DEV_URI }}
#
#      - name: Build, Tag and Push Docker Image
#        run: |
#          docker build -t ${{ env.ECR_NAME }} .
#          docker tag ${{ env.ECR_NAME }}:latest ${{ secrets.ECR_DEV_URI }}/${{ env.ECR_NAME }}:latest
#          docker push ${{ secrets.ECR_DEV_URI }}/${{ env.ECR_NAME }}:latest
#
#      - name: Deploy to EC2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ${{ secrets.EC2_USER }}
#          key: ${{ secrets.AWS_EC2_PEM_KEY }}
#          script: |
#            docker pull ${{ secrets.ECR_DEV_URI }}/${{ env.ECR_NAME }}:latest
#            docker stop korder-container || true
#            docker rm korder-container || true
#            docker run -d --name korder-container -p 80:6500 \
#              -e DB_HOST=${{ secrets.POSTGRESQL_END_POINT }} \
#              -e DB_NAME=${{ secrets.POSTGRESQL_DBNAME }} \
#              -e DB_USER=${{ secrets.POSTGRESQL_USERNAME }} \
#              -e DB_PASSWORD=${{ secrets.POSTGRESQL_PASSWORD }} \
#              ${{ secrets.ECR_DEV_URI }}/${{ env.ECR_NAME }}:latest
